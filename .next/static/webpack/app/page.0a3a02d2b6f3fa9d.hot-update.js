"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api-service.ts":
/*!****************************!*\
  !*** ./lib/api-service.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: () => (/* binding */ ApiError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   getAllLiveStreams: () => (/* binding */ getAllLiveStreams),\n/* harmony export */   getAllMovies: () => (/* binding */ getAllMovies),\n/* harmony export */   getAllSeries: () => (/* binding */ getAllSeries),\n/* harmony export */   getContentCurrentTime: () => (/* binding */ getContentCurrentTime),\n/* harmony export */   getCredentials: () => (/* binding */ getCredentials),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   getMovieInfo: () => (/* binding */ getMovieInfo),\n/* harmony export */   getSeriesInfo: () => (/* binding */ getSeriesInfo),\n/* harmony export */   getStreamUrl: () => (/* binding */ getStreamUrl),\n/* harmony export */   mapChannelToContent: () => (/* binding */ mapChannelToContent),\n/* harmony export */   mapMovieToContent: () => (/* binding */ mapMovieToContent),\n/* harmony export */   mapSeriesDetailsToContent: () => (/* binding */ mapSeriesDetailsToContent),\n/* harmony export */   mapSeriesToContent: () => (/* binding */ mapSeriesToContent),\n/* harmony export */   saveContentProgress: () => (/* binding */ saveContentProgress),\n/* harmony export */   searchContent: () => (/* binding */ searchContent),\n/* harmony export */   testConnection: () => (/* binding */ testConnection)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// Update the ApiCredentials interface to include forceHttps\n// Custom error classes\nclass AuthenticationError extends Error {\n    constructor(message = \"Authentication failed\"){\n        super(message);\n        this.name = \"AuthenticationError\";\n    }\n}\nclass NotFoundError extends Error {\n    constructor(message = \"Resource not found\"){\n        super(message);\n        this.name = \"NotFoundError\";\n    }\n}\nclass ApiError extends Error {\n    constructor(message = \"API error\", statusCode){\n        super(message);\n        this.name = \"ApiError\";\n        this.statusCode = statusCode;\n    }\n}\nclass NetworkError extends Error {\n    constructor(message = \"Network error\"){\n        super(message);\n        this.name = \"NetworkError\";\n    }\n}\n// Update the getCredentials function to handle the forceHttps option\nconst getCredentials = ()=>{\n    if (false) {}\n    const storedConfig = localStorage.getItem(\"streamConfig\");\n    if (!storedConfig) return null;\n    try {\n        const credentials = JSON.parse(storedConfig);\n        // If forceHttps is enabled, ensure the URL uses HTTPS\n        if (credentials.forceHttps && credentials.apiUrl.toLowerCase().startsWith(\"http:\")) {\n            credentials.apiUrl = credentials.apiUrl.replace(/^http:/i, \"https:\");\n        }\n        return credentials;\n    } catch (error) {\n        console.error(\"Failed to parse stored credentials:\", error);\n        return null;\n    }\n};\n// Update the apiRequest function to better handle mixed content errors\nasync function apiRequest(endpoint) {\n    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, retries = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2;\n    const credentials = getCredentials();\n    if (!credentials) {\n        throw new AuthenticationError(\"Credenciais não encontradas. Configure o aplicativo primeiro.\");\n    }\n    const { apiUrl, username, password } = credentials;\n    // Build URL with credentials and params\n    let url;\n    try {\n        url = new URL(apiUrl);\n    } catch (error) {\n        throw new Error(\"URL inv\\xe1lida: \".concat(apiUrl, \". Verifique a configura\\xe7\\xe3o.\"));\n    }\n    // Check for potential mixed content issues\n    if ( true && window.location.protocol === \"https:\" && url.protocol === \"http:\") {\n        console.warn(\"Potential mixed content issue: trying to load HTTP content in an HTTPS page\");\n    }\n    // Add authentication params and action\n    const queryParams = new URLSearchParams({\n        username,\n        password,\n        action: endpoint,\n        ...params\n    });\n    let fullUrl = \"\".concat(url.toString(), \"?\").concat(queryParams.toString());\n    try {\n        const response = await fetch(fullUrl, {\n            method: \"GET\",\n            mode: \"cors\",\n            credentials: \"omit\",\n            headers: {\n                \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n                \"accept-language\": \"pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7\",\n                \"cache-control\": \"max-age=0\",\n                \"upgrade-insecure-requests\": \"1\"\n            },\n            referrerPolicy: \"strict-origin-when-cross-origin\"\n        });\n        fetch(\"http://gvf15.com/player_api.php?username=darcicandido&password=D1073922o&action=get_series\", {\n            \"headers\": {\n                \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n                \"accept-language\": \"pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7\",\n                \"cache-control\": \"max-age=0\",\n                \"upgrade-insecure-requests\": \"1\"\n            },\n            \"referrerPolicy\": \"strict-origin-when-cross-origin\",\n            \"body\": null,\n            \"method\": \"GET\",\n            \"mode\": \"cors\",\n            \"credentials\": \"omit\"\n        });\n        // Handle different HTTP status codes\n        if (!response.ok) {\n            if (response.status === 401 || response.status === 403) {\n                throw new AuthenticationError();\n            } else if (response.status === 404) {\n                throw new NotFoundError();\n            } else if (response.status === 500 && process.env.USE_PROXY !== \"true\") {\n                console.warn(\"Erro 500 detectado. Tentando novamente com proxy habilitado.\");\n                process.env.USE_PROXY = \"true\";\n                return apiRequest(endpoint, params, retries);\n            } else {\n                throw new ApiError(\"Erro na API: \".concat(response.statusText), response.status);\n            }\n        }\n        // Parse JSON response\n        try {\n            const data = await response.json();\n            // Some APIs return error information in the response body\n            if (data && data.error) {\n                throw new ApiError(\"Erro na API: \".concat(data.error));\n            }\n            return data;\n        } catch (error) {\n            throw new ApiError(\"Erro ao processar resposta da API. Formato inválido.\");\n        }\n    } catch (error) {\n        // Check specifically for mixed content errors\n        if (error instanceof TypeError) {\n            const errorMessage = error.message.toLowerCase();\n            if (errorMessage.includes(\"mixed content\") || errorMessage.includes(\"blocked\") && errorMessage.includes(\"insecure\")) {\n                throw new NetworkError(\"Erro de conteúdo misto: seu navegador bloqueou a requisição HTTP em um site HTTPS. \" + \"Tente ativar 'Forçar HTTPS' nas configurações ou use um servidor com HTTPS.\");\n            }\n            // Handle network errors and implement retry logic\n            if (errorMessage.includes(\"fetch\")) {\n                // Network error\n                if (retries > 0) {\n                    console.log(\"Retry attempt (\".concat(retries, \" remaining) for \").concat(fullUrl));\n                    // Exponential backoff: wait longer between retries\n                    await new Promise((resolve)=>setTimeout(resolve, (3 - retries) * 1000));\n                    return apiRequest(endpoint, params, retries - 1);\n                }\n                throw new NetworkError();\n            }\n        }\n        // Re-throw other errors\n        throw error;\n    }\n}\n// Update the getStreamUrl function to handle HTTPS\nconst getStreamUrl = (streamId, streamType, episodeId)=>{\n    const credentials = getCredentials();\n    if (!credentials) {\n        throw new AuthenticationError(\"Credenciais não encontradas. Configure o aplicativo primeiro.\");\n    }\n    const { apiUrl, username, password, forceHttps } = credentials;\n    let baseUrl = apiUrl.replace(\"player_api.php\", \"\");\n    // If forceHttps is enabled, ensure the URL uses HTTPS\n    if (forceHttps && baseUrl.toLowerCase().startsWith(\"http:\")) {\n        baseUrl = baseUrl.replace(/^http:/i, \"https:\");\n    }\n    if (streamType === \"live\") {\n        return \"\".concat(baseUrl, \"live/\").concat(username, \"/\").concat(password, \"/\").concat(streamId, \".ts\");\n    } else if (streamType === \"movie\") {\n        return \"\".concat(baseUrl, \"movie/\").concat(username, \"/\").concat(password, \"/\").concat(streamId, \".mp4\");\n    } else if (streamType === \"series\" && episodeId) {\n        return \"\".concat(baseUrl, \"series/\").concat(username, \"/\").concat(password, \"/\").concat(streamId, \"/\").concat(episodeId, \".mp4\");\n    }\n    throw new Error(\"Tipo de stream inválido ou ID de episódio ausente para séries\");\n};\n// API Endpoints and Data Mapping\nconst API_ENDPOINTS = {\n    GET_ALL_SERIES: \"get_series\",\n    GET_ALL_MOVIES: \"get_vod\",\n    GET_ALL_LIVE_STREAMS: \"get_live_streams\",\n    GET_SERIES_INFO: \"get_series_info\",\n    GET_MOVIE_INFO: \"get_vod_info\",\n    SEARCH: \"search\"\n};\n// API Calls\nconst getAllSeries = async ()=>{\n    const response = await apiRequest(\"get_series\");\n    return Object.entries(response.series || {}).map((param)=>{\n        let [id, series] = param;\n        return {\n            id,\n            ...series\n        };\n    });\n};\nconst getAllMovies = async ()=>{\n    const response = await apiRequest(\"get_vod\");\n    return Object.entries(response.vod || {}).map((param)=>{\n        let [id, movie] = param;\n        return {\n            id,\n            ...movie\n        };\n    });\n};\nconst getAllLiveStreams = async ()=>{\n    const response = await apiRequest(\"get_live_streams\");\n    return Object.entries(response.live || {}).map((param)=>{\n        let [id, channel] = param;\n        return {\n            id,\n            ...channel\n        };\n    });\n};\nconst getSeriesInfo = async (seriesId)=>{\n    const response = await apiRequest(API_ENDPOINTS.GET_SERIES_INFO, {\n        series_id: seriesId\n    });\n    return response;\n};\nconst getMovieInfo = async (vodId)=>{\n    const response = await apiRequest(API_ENDPOINTS.GET_MOVIE_INFO, {\n        vod_id: vodId\n    });\n    return response;\n};\nconst searchContent = async (query)=>{\n    try {\n        const response = await apiRequest(API_ENDPOINTS.SEARCH, {\n            query: query\n        });\n        if (!response || !response.data) {\n            return [];\n        }\n        const seriesResults = Object.entries(response.data.series || {}).map((param)=>{\n            let [id, series] = param;\n            return mapSeriesToContent({\n                id,\n                ...series\n            });\n        });\n        const movieResults = Object.entries(response.data.vod || {}).map((param)=>{\n            let [id, movie] = param;\n            return mapMovieToContent({\n                id,\n                ...movie\n            });\n        });\n        const channelResults = Object.entries(response.data.live || {}).map((param)=>{\n            let [id, channel] = param;\n            return mapChannelToContent({\n                id,\n                ...channel\n            });\n        });\n        return [\n            ...seriesResults,\n            ...movieResults,\n            ...channelResults\n        ];\n    } catch (error) {\n        console.error(\"Search failed:\", error);\n        return [];\n    }\n};\n// Data Mapping Functions\nconst mapSeriesToContent = (series)=>({\n        id: series.id,\n        title: series.name,\n        description: series.plot,\n        thumbnail: series.cover,\n        type: \"series\",\n        genre: series.genre,\n        year: series.year\n    });\nconst mapMovieToContent = (movie)=>({\n        id: movie.id,\n        title: movie.name,\n        description: movie.plot,\n        thumbnail: movie.cover,\n        type: \"movie\",\n        genre: movie.genre,\n        year: movie.year,\n        duration: movie.duration\n    });\nconst mapChannelToContent = (channel)=>({\n        id: channel.id,\n        title: channel.name,\n        description: \"\",\n        thumbnail: channel.stream_icon,\n        type: \"channel\"\n    });\nconst mapSeriesDetailsToContent = (seriesDetails)=>{\n    const series = seriesDetails.info;\n    const episodes = Object.entries(seriesDetails.episodes || {}).map((param)=>{\n        let [episodeId, episode] = param;\n        return {\n            id: episodeId,\n            title: episode.title,\n            description: episode.plot,\n            duration: episode.duration\n        };\n    });\n    return {\n        id: series.id,\n        title: series.name,\n        description: series.plot,\n        thumbnail: series.cover,\n        type: \"series\",\n        genre: series.genre,\n        year: series.year,\n        episodes: episodes\n    };\n};\n// Local Storage Functions\nconst PROGRESS_KEY = \"contentProgress\";\nconst saveContentProgress = (contentId, currentTime, duration, episodeId)=>{\n    if (false) {}\n    try {\n        const progressData = JSON.parse(localStorage.getItem(PROGRESS_KEY) || \"{}\");\n        progressData[contentId + (episodeId ? \"_\".concat(episodeId) : \"\")] = {\n            currentTime,\n            duration\n        };\n        localStorage.setItem(PROGRESS_KEY, JSON.stringify(progressData));\n    } catch (error) {\n        console.error(\"Failed to save content progress:\", error);\n    }\n};\nconst getContentCurrentTime = (contentId, episodeId)=>{\n    if (false) {}\n    try {\n        const progressData = JSON.parse(localStorage.getItem(PROGRESS_KEY) || \"{}\");\n        const progress = progressData[contentId + (episodeId ? \"_\".concat(episodeId) : \"\")];\n        return progress ? progress.currentTime : null;\n    } catch (error) {\n        console.error(\"Failed to get content progress:\", error);\n        return null;\n    }\n};\n// Test Connection\nconst testConnection = async ()=>{\n    try {\n        // Attempt to fetch series (a basic API call)\n        await getAllSeries();\n        return true;\n    } catch (error) {\n        console.error(\"Connection test failed:\", error);\n        return false;\n    }\n};\n// Error Message Helper\nconst getErrorMessage = (error)=>{\n    if (error instanceof AuthenticationError) {\n        return \"Falha na autenticação. Verifique suas credenciais.\";\n    } else if (error instanceof NotFoundError) {\n        return \"Recurso não encontrado.\";\n    } else if (error instanceof ApiError) {\n        return \"Erro na API: \".concat(error.message);\n    } else if (error instanceof NetworkError) {\n        return \"Erro de rede. Verifique sua conexão com a internet.\";\n    } else if (error instanceof TypeError && error.message.includes(\"Failed to fetch\")) {\n        return \"Erro ao conectar ao servidor. Verifique a URL e sua conexão.\";\n    } else {\n        return \"Ocorreu um erro inesperado.\";\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsbUNBQW1DQTtRQUNqRCxPQUFPO0lBQ1Q7QUFDRixFQUFDO0FBRUQsa0JBQWtCO0FBQ1gsTUFBTXNHLGlCQUFpQjtJQUM1QixJQUFJO1FBQ0YsNkNBQTZDO1FBQzdDLE1BQU1sRDtRQUNOLE9BQU87SUFDVCxFQUFFLE9BQU9wRCxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQywyQkFBMkJBO1FBQ3pDLE9BQU87SUFDVDtBQUNGLEVBQUM7QUFFRCx1QkFBdUI7QUFDaEIsTUFBTXVHLGtCQUFrQixDQUFDdkc7SUFDOUIsSUFBSUEsaUJBQWlCckIscUJBQXFCO1FBQ3hDLE9BQU87SUFDVCxPQUFPLElBQUlxQixpQkFBaUJoQixlQUFlO1FBQ3pDLE9BQU87SUFDVCxPQUFPLElBQUlnQixpQkFBaUJmLFVBQVU7UUFDcEMsT0FBTyxnQkFBOEIsT0FBZGUsTUFBTWxCLE9BQU87SUFDdEMsT0FBTyxJQUFJa0IsaUJBQWlCYixjQUFjO1FBQ3hDLE9BQU87SUFDVCxPQUFPLElBQUlhLGlCQUFpQmlDLGFBQWFqQyxNQUFNbEIsT0FBTyxDQUFDcUQsUUFBUSxDQUFDLG9CQUFvQjtRQUNsRixPQUFPO0lBQ1QsT0FBTztRQUNMLE9BQU87SUFDVDtBQUNGLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZWl0b3IuY2FuZGlkby9Eb2N1bWVudHMvaXB0di9pcHR2LWFwcC9saWIvYXBpLXNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVXBkYXRlIHRoZSBBcGlDcmVkZW50aWFscyBpbnRlcmZhY2UgdG8gaW5jbHVkZSBmb3JjZUh0dHBzXG5leHBvcnQgaW50ZXJmYWNlIEFwaUNyZWRlbnRpYWxzIHtcbiAgYXBpVXJsOiBzdHJpbmdcbiAgdXNlcm5hbWU6IHN0cmluZ1xuICBwYXNzd29yZDogc3RyaW5nXG4gIGZvcmNlSHR0cHM/OiBib29sZWFuXG59XG5cbi8vIEN1c3RvbSBlcnJvciBjbGFzc2VzXG5leHBvcnQgY2xhc3MgQXV0aGVudGljYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSA9IFwiQXV0aGVudGljYXRpb24gZmFpbGVkXCIpIHtcbiAgICBzdXBlcihtZXNzYWdlKVxuICAgIHRoaXMubmFtZSA9IFwiQXV0aGVudGljYXRpb25FcnJvclwiXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSBcIlJlc291cmNlIG5vdCBmb3VuZFwiKSB7XG4gICAgc3VwZXIobWVzc2FnZSlcbiAgICB0aGlzLm5hbWUgPSBcIk5vdEZvdW5kRXJyb3JcIlxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBcGlFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgcHVibGljIHN0YXR1c0NvZGU6IG51bWJlciB8IHVuZGVmaW5lZFxuXG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSBcIkFQSSBlcnJvclwiLCBzdGF0dXNDb2RlPzogbnVtYmVyKSB7XG4gICAgc3VwZXIobWVzc2FnZSlcbiAgICB0aGlzLm5hbWUgPSBcIkFwaUVycm9yXCJcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5ldHdvcmtFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSA9IFwiTmV0d29yayBlcnJvclwiKSB7XG4gICAgc3VwZXIobWVzc2FnZSlcbiAgICB0aGlzLm5hbWUgPSBcIk5ldHdvcmtFcnJvclwiXG4gIH1cbn1cblxuLy8gVXBkYXRlIHRoZSBnZXRDcmVkZW50aWFscyBmdW5jdGlvbiB0byBoYW5kbGUgdGhlIGZvcmNlSHR0cHMgb3B0aW9uXG5leHBvcnQgY29uc3QgZ2V0Q3JlZGVudGlhbHMgPSAoKTogQXBpQ3JlZGVudGlhbHMgfCBudWxsID0+IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBudWxsXG5cbiAgY29uc3Qgc3RvcmVkQ29uZmlnID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzdHJlYW1Db25maWdcIilcbiAgaWYgKCFzdG9yZWRDb25maWcpIHJldHVybiBudWxsXG5cbiAgdHJ5IHtcbiAgICBjb25zdCBjcmVkZW50aWFscyA9IEpTT04ucGFyc2Uoc3RvcmVkQ29uZmlnKSBhcyBBcGlDcmVkZW50aWFsc1xuXG4gICAgLy8gSWYgZm9yY2VIdHRwcyBpcyBlbmFibGVkLCBlbnN1cmUgdGhlIFVSTCB1c2VzIEhUVFBTXG4gICAgaWYgKGNyZWRlbnRpYWxzLmZvcmNlSHR0cHMgJiYgY3JlZGVudGlhbHMuYXBpVXJsLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChcImh0dHA6XCIpKSB7XG4gICAgICBjcmVkZW50aWFscy5hcGlVcmwgPSBjcmVkZW50aWFscy5hcGlVcmwucmVwbGFjZSgvXmh0dHA6L2ksIFwiaHR0cHM6XCIpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBwYXJzZSBzdG9yZWQgY3JlZGVudGlhbHM6XCIsIGVycm9yKVxuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuLy8gVXBkYXRlIHRoZSBhcGlSZXF1ZXN0IGZ1bmN0aW9uIHRvIGJldHRlciBoYW5kbGUgbWl4ZWQgY29udGVudCBlcnJvcnNcbmFzeW5jIGZ1bmN0aW9uIGFwaVJlcXVlc3Q8VD4oZW5kcG9pbnQ6IHN0cmluZywgcGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge30sIHJldHJpZXMgPSAyKTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IGNyZWRlbnRpYWxzID0gZ2V0Q3JlZGVudGlhbHMoKVxuICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IoXCJDcmVkZW5jaWFpcyBuw6NvIGVuY29udHJhZGFzLiBDb25maWd1cmUgbyBhcGxpY2F0aXZvIHByaW1laXJvLlwiKVxuICB9XG5cbiAgY29uc3QgeyBhcGlVcmwsIHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gY3JlZGVudGlhbHNcblxuICAvLyBCdWlsZCBVUkwgd2l0aCBjcmVkZW50aWFscyBhbmQgcGFyYW1zXG4gIGxldCB1cmw6IFVSTFxuICB0cnkge1xuICAgIHVybCA9IG5ldyBVUkwoYXBpVXJsKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVVJMIGludsOhbGlkYTogJHthcGlVcmx9LiBWZXJpZmlxdWUgYSBjb25maWd1cmHDp8Ojby5gKVxuICB9XG5cbiAgLy8gQ2hlY2sgZm9yIHBvdGVudGlhbCBtaXhlZCBjb250ZW50IGlzc3Vlc1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09IFwiaHR0cHM6XCIgJiYgdXJsLnByb3RvY29sID09PSBcImh0dHA6XCIpIHtcbiAgICBjb25zb2xlLndhcm4oXCJQb3RlbnRpYWwgbWl4ZWQgY29udGVudCBpc3N1ZTogdHJ5aW5nIHRvIGxvYWQgSFRUUCBjb250ZW50IGluIGFuIEhUVFBTIHBhZ2VcIilcbiAgfVxuXG4gIC8vIEFkZCBhdXRoZW50aWNhdGlvbiBwYXJhbXMgYW5kIGFjdGlvblxuICBjb25zdCBxdWVyeVBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgIHVzZXJuYW1lLFxuICAgIHBhc3N3b3JkLFxuICAgIGFjdGlvbjogZW5kcG9pbnQsIC8vIEFkZCB0aGUgYWN0aW9uIHBhcmFtZXRlciBoZXJlXG4gICAgLi4ucGFyYW1zLFxuICB9KVxuXG4gIGxldCBmdWxsVXJsID0gYCR7dXJsLnRvU3RyaW5nKCl9PyR7cXVlcnlQYXJhbXMudG9TdHJpbmcoKX1gXG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGZ1bGxVcmwsIHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIG1vZGU6IFwiY29yc1wiLFxuICAgICAgY3JlZGVudGlhbHM6IFwib21pdFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgXCJhY2NlcHRcIjogXCJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjdcIixcbiAgICAgIFwiYWNjZXB0LWxhbmd1YWdlXCI6IFwicHQtQlIscHQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjdcIixcbiAgICAgIFwiY2FjaGUtY29udHJvbFwiOiBcIm1heC1hZ2U9MFwiLFxuICAgICAgXCJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzXCI6IFwiMVwiLFxuICAgICAgfSxcbiAgICAgIHJlZmVycmVyUG9saWN5OiBcInN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW5cIixcbiAgICB9KVxuXG4gICAgXG4gICAgZmV0Y2goXCJodHRwOi8vZ3ZmMTUuY29tL3BsYXllcl9hcGkucGhwP3VzZXJuYW1lPWRhcmNpY2FuZGlkbyZwYXNzd29yZD1EMTA3MzkyMm8mYWN0aW9uPWdldF9zZXJpZXNcIiwge1xuICAgICAgXCJoZWFkZXJzXCI6IHtcbiAgICAgICAgXCJhY2NlcHRcIjogXCJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjdcIixcbiAgICAgICAgXCJhY2NlcHQtbGFuZ3VhZ2VcIjogXCJwdC1CUixwdDtxPTAuOSxlbi1VUztxPTAuOCxlbjtxPTAuN1wiLFxuICAgICAgICBcImNhY2hlLWNvbnRyb2xcIjogXCJtYXgtYWdlPTBcIixcbiAgICAgICAgXCJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzXCI6IFwiMVwiXG4gICAgICB9LFxuICAgICAgXCJyZWZlcnJlclBvbGljeVwiOiBcInN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW5cIixcbiAgICAgIFwiYm9keVwiOiBudWxsLFxuICAgICAgXCJtZXRob2RcIjogXCJHRVRcIixcbiAgICAgIFwibW9kZVwiOiBcImNvcnNcIixcbiAgICAgIFwiY3JlZGVudGlhbHNcIjogXCJvbWl0XCJcbiAgICB9KTtcblxuXG4gICAgLy8gSGFuZGxlIGRpZmZlcmVudCBIVFRQIHN0YXR1cyBjb2Rlc1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSB8fCByZXNwb25zZS5zdGF0dXMgPT09IDQwMykge1xuICAgICAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25FcnJvcigpXG4gICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgIHRocm93IG5ldyBOb3RGb3VuZEVycm9yKClcbiAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA1MDAgJiYgcHJvY2Vzcy5lbnYuVVNFX1BST1hZICE9PSBcInRydWVcIikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJFcnJvIDUwMCBkZXRlY3RhZG8uIFRlbnRhbmRvIG5vdmFtZW50ZSBjb20gcHJveHkgaGFiaWxpdGFkby5cIilcbiAgICAgICAgcHJvY2Vzcy5lbnYuVVNFX1BST1hZID0gXCJ0cnVlXCJcbiAgICAgICAgcmV0dXJuIGFwaVJlcXVlc3Q8VD4oZW5kcG9pbnQsIHBhcmFtcywgcmV0cmllcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBBcGlFcnJvcihgRXJybyBuYSBBUEk6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gLCByZXNwb25zZS5zdGF0dXMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgSlNPTiByZXNwb25zZVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICAgIC8vIFNvbWUgQVBJcyByZXR1cm4gZXJyb3IgaW5mb3JtYXRpb24gaW4gdGhlIHJlc3BvbnNlIGJvZHlcbiAgICAgIGlmIChkYXRhICYmIGRhdGEuZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKGBFcnJvIG5hIEFQSTogJHtkYXRhLmVycm9yfWApXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhIGFzIFRcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKFwiRXJybyBhbyBwcm9jZXNzYXIgcmVzcG9zdGEgZGEgQVBJLiBGb3JtYXRvIGludsOhbGlkby5cIilcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gQ2hlY2sgc3BlY2lmaWNhbGx5IGZvciBtaXhlZCBjb250ZW50IGVycm9yc1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFR5cGVFcnJvcikge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZS50b0xvd2VyQ2FzZSgpXG5cbiAgICAgIGlmIChcbiAgICAgICAgZXJyb3JNZXNzYWdlLmluY2x1ZGVzKFwibWl4ZWQgY29udGVudFwiKSB8fFxuICAgICAgICAoZXJyb3JNZXNzYWdlLmluY2x1ZGVzKFwiYmxvY2tlZFwiKSAmJiBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoXCJpbnNlY3VyZVwiKSlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgTmV0d29ya0Vycm9yKFxuICAgICAgICAgIFwiRXJybyBkZSBjb250ZcO6ZG8gbWlzdG86IHNldSBuYXZlZ2Fkb3IgYmxvcXVlb3UgYSByZXF1aXNpw6fDo28gSFRUUCBlbSB1bSBzaXRlIEhUVFBTLiBcIiArXG4gICAgICAgICAgICBcIlRlbnRlIGF0aXZhciAnRm9yw6dhciBIVFRQUycgbmFzIGNvbmZpZ3VyYcOnw7VlcyBvdSB1c2UgdW0gc2Vydmlkb3IgY29tIEhUVFBTLlwiLFxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIC8vIEhhbmRsZSBuZXR3b3JrIGVycm9ycyBhbmQgaW1wbGVtZW50IHJldHJ5IGxvZ2ljXG4gICAgICBpZiAoZXJyb3JNZXNzYWdlLmluY2x1ZGVzKFwiZmV0Y2hcIikpIHtcbiAgICAgICAgLy8gTmV0d29yayBlcnJvclxuICAgICAgICBpZiAocmV0cmllcyA+IDApIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgUmV0cnkgYXR0ZW1wdCAoJHtyZXRyaWVzfSByZW1haW5pbmcpIGZvciAke2Z1bGxVcmx9YClcbiAgICAgICAgICAvLyBFeHBvbmVudGlhbCBiYWNrb2ZmOiB3YWl0IGxvbmdlciBiZXR3ZWVuIHJldHJpZXNcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAoMyAtIHJldHJpZXMpICogMTAwMCkpXG4gICAgICAgICAgcmV0dXJuIGFwaVJlcXVlc3Q8VD4oZW5kcG9pbnQsIHBhcmFtcywgcmV0cmllcyAtIDEpXG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IE5ldHdvcmtFcnJvcigpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmUtdGhyb3cgb3RoZXIgZXJyb3JzXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG4vLyBVcGRhdGUgdGhlIGdldFN0cmVhbVVybCBmdW5jdGlvbiB0byBoYW5kbGUgSFRUUFNcbmV4cG9ydCBjb25zdCBnZXRTdHJlYW1VcmwgPSAoc3RyZWFtSWQ6IHN0cmluZywgc3RyZWFtVHlwZTogXCJsaXZlXCIgfCBcIm1vdmllXCIgfCBcInNlcmllc1wiLCBlcGlzb2RlSWQ/OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBjcmVkZW50aWFscyA9IGdldENyZWRlbnRpYWxzKClcbiAgaWYgKCFjcmVkZW50aWFscykge1xuICAgIHRocm93IG5ldyBBdXRoZW50aWNhdGlvbkVycm9yKFwiQ3JlZGVuY2lhaXMgbsOjbyBlbmNvbnRyYWRhcy4gQ29uZmlndXJlIG8gYXBsaWNhdGl2byBwcmltZWlyby5cIilcbiAgfVxuXG4gIGNvbnN0IHsgYXBpVXJsLCB1c2VybmFtZSwgcGFzc3dvcmQsIGZvcmNlSHR0cHMgfSA9IGNyZWRlbnRpYWxzXG4gIGxldCBiYXNlVXJsID0gYXBpVXJsLnJlcGxhY2UoXCJwbGF5ZXJfYXBpLnBocFwiLCBcIlwiKVxuXG4gIC8vIElmIGZvcmNlSHR0cHMgaXMgZW5hYmxlZCwgZW5zdXJlIHRoZSBVUkwgdXNlcyBIVFRQU1xuICBpZiAoZm9yY2VIdHRwcyAmJiBiYXNlVXJsLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChcImh0dHA6XCIpKSB7XG4gICAgYmFzZVVybCA9IGJhc2VVcmwucmVwbGFjZSgvXmh0dHA6L2ksIFwiaHR0cHM6XCIpXG4gIH1cblxuICBpZiAoc3RyZWFtVHlwZSA9PT0gXCJsaXZlXCIpIHtcbiAgICByZXR1cm4gYCR7YmFzZVVybH1saXZlLyR7dXNlcm5hbWV9LyR7cGFzc3dvcmR9LyR7c3RyZWFtSWR9LnRzYFxuICB9IGVsc2UgaWYgKHN0cmVhbVR5cGUgPT09IFwibW92aWVcIikge1xuICAgIHJldHVybiBgJHtiYXNlVXJsfW1vdmllLyR7dXNlcm5hbWV9LyR7cGFzc3dvcmR9LyR7c3RyZWFtSWR9Lm1wNGBcbiAgfSBlbHNlIGlmIChzdHJlYW1UeXBlID09PSBcInNlcmllc1wiICYmIGVwaXNvZGVJZCkge1xuICAgIHJldHVybiBgJHtiYXNlVXJsfXNlcmllcy8ke3VzZXJuYW1lfS8ke3Bhc3N3b3JkfS8ke3N0cmVhbUlkfS8ke2VwaXNvZGVJZH0ubXA0YFxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFwiVGlwbyBkZSBzdHJlYW0gaW52w6FsaWRvIG91IElEIGRlIGVwaXPDs2RpbyBhdXNlbnRlIHBhcmEgc8Opcmllc1wiKVxufVxuXG4vLyBBUEkgRW5kcG9pbnRzIGFuZCBEYXRhIE1hcHBpbmdcbmNvbnN0IEFQSV9FTkRQT0lOVFMgPSB7XG4gIEdFVF9BTExfU0VSSUVTOiBcImdldF9zZXJpZXNcIixcbiAgR0VUX0FMTF9NT1ZJRVM6IFwiZ2V0X3ZvZFwiLFxuICBHRVRfQUxMX0xJVkVfU1RSRUFNUzogXCJnZXRfbGl2ZV9zdHJlYW1zXCIsXG4gIEdFVF9TRVJJRVNfSU5GTzogXCJnZXRfc2VyaWVzX2luZm9cIixcbiAgR0VUX01PVklFX0lORk86IFwiZ2V0X3ZvZF9pbmZvXCIsXG4gIFNFQVJDSDogXCJzZWFyY2hcIixcbn1cblxuaW50ZXJmYWNlIEFwaVJlc3BvbnNlPFQ+IHtcbiAgc3RhdHVzOiBib29sZWFuXG4gIGRhdGE6IFRcbiAgZXJyb3I/OiBzdHJpbmdcbn1cblxuLy8gRGF0YSBUeXBlc1xuZXhwb3J0IGludGVyZmFjZSBDb250ZW50SXRlbSB7XG4gIGlkOiBzdHJpbmdcbiAgdGl0bGU6IHN0cmluZ1xuICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gIHRodW1ibmFpbDogc3RyaW5nXG4gIGJhY2tkcm9wPzogc3RyaW5nXG4gIHR5cGU6IFwic2VyaWVzXCIgfCBcIm1vdmllXCIgfCBcImNoYW5uZWxcIlxuICBnZW5yZT86IHN0cmluZ1xuICB5ZWFyPzogc3RyaW5nXG4gIGR1cmF0aW9uPzogc3RyaW5nXG4gIHByb2dyZXNzPzogbnVtYmVyXG4gIGVwaXNvZGVzPzogRXBpc29kZVtdXG4gIGluZm8/OiBhbnlcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFcGlzb2RlIHtcbiAgaWQ6IHN0cmluZ1xuICB0aXRsZTogc3RyaW5nXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcbiAgdGh1bWJuYWlsPzogc3RyaW5nXG4gIGR1cmF0aW9uPzogc3RyaW5nXG4gIHByb2dyZXNzPzogbnVtYmVyXG59XG5cbmludGVyZmFjZSBTZXJpZXNSZXNwb25zZSB7XG4gIHNlcmllczoge1xuICAgIFtzZXJpZXNJZDogc3RyaW5nXToge1xuICAgICAgbmFtZTogc3RyaW5nXG4gICAgICBjb3Zlcjogc3RyaW5nXG4gICAgICBwbG90OiBzdHJpbmdcbiAgICAgIGdlbnJlOiBzdHJpbmdcbiAgICAgIHllYXI6IHN0cmluZ1xuICAgICAgZXBpc29kZV9kZXRhaWxzOiB7XG4gICAgICAgIFtlcGlzb2RlSWQ6IHN0cmluZ106IHtcbiAgICAgICAgICB0aXRsZTogc3RyaW5nXG4gICAgICAgICAgcGxvdDogc3RyaW5nXG4gICAgICAgICAgZXBpc29kZV9udW06IHN0cmluZ1xuICAgICAgICAgIHNlYXNvbl9udW06IHN0cmluZ1xuICAgICAgICAgIGR1cmF0aW9uOiBzdHJpbmdcbiAgICAgICAgICBjdXN0b21fc2lkOiBzdHJpbmdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5pbnRlcmZhY2UgTW92aWVSZXNwb25zZSB7XG4gIHZvZDoge1xuICAgIFttb3ZpZUlkOiBzdHJpbmddOiB7XG4gICAgICBuYW1lOiBzdHJpbmdcbiAgICAgIGNvdmVyOiBzdHJpbmdcbiAgICAgIHBsb3Q6IHN0cmluZ1xuICAgICAgZ2VucmU6IHN0cmluZ1xuICAgICAgeWVhcjogc3RyaW5nXG4gICAgICBkdXJhdGlvbjogc3RyaW5nXG4gICAgfVxuICB9XG59XG5cbmludGVyZmFjZSBMaXZlU3RyZWFtUmVzcG9uc2Uge1xuICBsaXZlOiB7XG4gICAgW2NoYW5uZWxJZDogc3RyaW5nXToge1xuICAgICAgbmFtZTogc3RyaW5nXG4gICAgICBzdHJlYW1faWNvbjogc3RyaW5nXG4gICAgICBlcGdfY2hhbm5lbF9pZDogc3RyaW5nXG4gICAgfVxuICB9XG59XG5cbi8vIEFQSSBDYWxsc1xuZXhwb3J0IGNvbnN0IGdldEFsbFNlcmllcyA9IGFzeW5jICgpOiBQcm9taXNlPGFueVtdPiA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpUmVxdWVzdDxhbnk+KFwiZ2V0X3Nlcmllc1wiKVxuICByZXR1cm4gT2JqZWN0LmVudHJpZXMocmVzcG9uc2Uuc2VyaWVzIHx8IHt9KS5tYXAoKFtpZCwgc2VyaWVzXSkgPT4gKHsgaWQsIC4uLnNlcmllcyB9KSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldEFsbE1vdmllcyA9IGFzeW5jICgpOiBQcm9taXNlPGFueVtdPiA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpUmVxdWVzdDxhbnk+KFwiZ2V0X3ZvZFwiKVxuICByZXR1cm4gT2JqZWN0LmVudHJpZXMocmVzcG9uc2Uudm9kIHx8IHt9KS5tYXAoKFtpZCwgbW92aWVdKSA9PiAoeyBpZCwgLi4ubW92aWUgfSkpXG59XG5cbmV4cG9ydCBjb25zdCBnZXRBbGxMaXZlU3RyZWFtcyA9IGFzeW5jICgpOiBQcm9taXNlPGFueVtdPiA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpUmVxdWVzdDxhbnk+KFwiZ2V0X2xpdmVfc3RyZWFtc1wiKVxuICByZXR1cm4gT2JqZWN0LmVudHJpZXMocmVzcG9uc2UubGl2ZSB8fCB7fSkubWFwKChbaWQsIGNoYW5uZWxdKSA9PiAoeyBpZCwgLi4uY2hhbm5lbCB9KSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldFNlcmllc0luZm8gPSBhc3luYyAoc2VyaWVzSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpUmVxdWVzdDxhbnk+KEFQSV9FTkRQT0lOVFMuR0VUX1NFUklFU19JTkZPLCB7IHNlcmllc19pZDogc2VyaWVzSWQgfSlcbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbmV4cG9ydCBjb25zdCBnZXRNb3ZpZUluZm8gPSBhc3luYyAodm9kSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpUmVxdWVzdDxhbnk+KEFQSV9FTkRQT0lOVFMuR0VUX01PVklFX0lORk8sIHsgdm9kX2lkOiB2b2RJZCB9KVxuICByZXR1cm4gcmVzcG9uc2Vcbn1cblxuZXhwb3J0IGNvbnN0IHNlYXJjaENvbnRlbnQgPSBhc3luYyAocXVlcnk6IHN0cmluZyk6IFByb21pc2U8Q29udGVudEl0ZW1bXT4gPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpUmVxdWVzdDxhbnk+KEFQSV9FTkRQT0lOVFMuU0VBUkNILCB7IHF1ZXJ5OiBxdWVyeSB9KVxuXG4gICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2UuZGF0YSkge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgY29uc3Qgc2VyaWVzUmVzdWx0cyA9IE9iamVjdC5lbnRyaWVzKHJlc3BvbnNlLmRhdGEuc2VyaWVzIHx8IHt9KS5tYXAoKFtpZCwgc2VyaWVzXSkgPT5cbiAgICAgIG1hcFNlcmllc1RvQ29udGVudCh7IGlkLCAuLi5zZXJpZXMgfSksXG4gICAgKVxuICAgIGNvbnN0IG1vdmllUmVzdWx0cyA9IE9iamVjdC5lbnRyaWVzKHJlc3BvbnNlLmRhdGEudm9kIHx8IHt9KS5tYXAoKFtpZCwgbW92aWVdKSA9PlxuICAgICAgbWFwTW92aWVUb0NvbnRlbnQoeyBpZCwgLi4ubW92aWUgfSksXG4gICAgKVxuICAgIGNvbnN0IGNoYW5uZWxSZXN1bHRzID0gT2JqZWN0LmVudHJpZXMocmVzcG9uc2UuZGF0YS5saXZlIHx8IHt9KS5tYXAoKFtpZCwgY2hhbm5lbF0pID0+XG4gICAgICBtYXBDaGFubmVsVG9Db250ZW50KHsgaWQsIC4uLmNoYW5uZWwgfSksXG4gICAgKVxuXG4gICAgcmV0dXJuIFsuLi5zZXJpZXNSZXN1bHRzLCAuLi5tb3ZpZVJlc3VsdHMsIC4uLmNoYW5uZWxSZXN1bHRzXVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJTZWFyY2ggZmFpbGVkOlwiLCBlcnJvcilcbiAgICByZXR1cm4gW11cbiAgfVxufVxuXG4vLyBEYXRhIE1hcHBpbmcgRnVuY3Rpb25zXG5leHBvcnQgY29uc3QgbWFwU2VyaWVzVG9Db250ZW50ID0gKHNlcmllczogYW55KTogQ29udGVudEl0ZW0gPT4gKHtcbiAgaWQ6IHNlcmllcy5pZCxcbiAgdGl0bGU6IHNlcmllcy5uYW1lLFxuICBkZXNjcmlwdGlvbjogc2VyaWVzLnBsb3QsXG4gIHRodW1ibmFpbDogc2VyaWVzLmNvdmVyLFxuICB0eXBlOiBcInNlcmllc1wiLFxuICBnZW5yZTogc2VyaWVzLmdlbnJlLFxuICB5ZWFyOiBzZXJpZXMueWVhcixcbn0pXG5cbmV4cG9ydCBjb25zdCBtYXBNb3ZpZVRvQ29udGVudCA9IChtb3ZpZTogYW55KTogQ29udGVudEl0ZW0gPT4gKHtcbiAgaWQ6IG1vdmllLmlkLFxuICB0aXRsZTogbW92aWUubmFtZSxcbiAgZGVzY3JpcHRpb246IG1vdmllLnBsb3QsXG4gIHRodW1ibmFpbDogbW92aWUuY292ZXIsXG4gIHR5cGU6IFwibW92aWVcIixcbiAgZ2VucmU6IG1vdmllLmdlbnJlLFxuICB5ZWFyOiBtb3ZpZS55ZWFyLFxuICBkdXJhdGlvbjogbW92aWUuZHVyYXRpb24sXG59KVxuXG5leHBvcnQgY29uc3QgbWFwQ2hhbm5lbFRvQ29udGVudCA9IChjaGFubmVsOiBhbnkpOiBDb250ZW50SXRlbSA9PiAoe1xuICBpZDogY2hhbm5lbC5pZCxcbiAgdGl0bGU6IGNoYW5uZWwubmFtZSxcbiAgZGVzY3JpcHRpb246IFwiXCIsXG4gIHRodW1ibmFpbDogY2hhbm5lbC5zdHJlYW1faWNvbixcbiAgdHlwZTogXCJjaGFubmVsXCIsXG59KVxuXG5leHBvcnQgY29uc3QgbWFwU2VyaWVzRGV0YWlsc1RvQ29udGVudCA9IChzZXJpZXNEZXRhaWxzOiBhbnkpOiBDb250ZW50SXRlbSA9PiB7XG4gIGNvbnN0IHNlcmllcyA9IHNlcmllc0RldGFpbHMuaW5mb1xuICBjb25zdCBlcGlzb2RlczogRXBpc29kZVtdID0gT2JqZWN0LmVudHJpZXMoc2VyaWVzRGV0YWlscy5lcGlzb2RlcyB8fCB7fSkubWFwKFxuICAgIChbZXBpc29kZUlkLCBlcGlzb2RlXTogW3N0cmluZywgYW55XSkgPT4gKHtcbiAgICAgIGlkOiBlcGlzb2RlSWQsXG4gICAgICB0aXRsZTogZXBpc29kZS50aXRsZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBlcGlzb2RlLnBsb3QsXG4gICAgICBkdXJhdGlvbjogZXBpc29kZS5kdXJhdGlvbixcbiAgICB9KSxcbiAgKVxuXG4gIHJldHVybiB7XG4gICAgaWQ6IHNlcmllcy5pZCxcbiAgICB0aXRsZTogc2VyaWVzLm5hbWUsXG4gICAgZGVzY3JpcHRpb246IHNlcmllcy5wbG90LFxuICAgIHRodW1ibmFpbDogc2VyaWVzLmNvdmVyLFxuICAgIHR5cGU6IFwic2VyaWVzXCIsXG4gICAgZ2VucmU6IHNlcmllcy5nZW5yZSxcbiAgICB5ZWFyOiBzZXJpZXMueWVhcixcbiAgICBlcGlzb2RlczogZXBpc29kZXMsXG4gIH1cbn1cblxuLy8gTG9jYWwgU3RvcmFnZSBGdW5jdGlvbnNcbmNvbnN0IFBST0dSRVNTX0tFWSA9IFwiY29udGVudFByb2dyZXNzXCJcblxuZXhwb3J0IGNvbnN0IHNhdmVDb250ZW50UHJvZ3Jlc3MgPSAoY29udGVudElkOiBzdHJpbmcsIGN1cnJlbnRUaW1lOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIsIGVwaXNvZGVJZD86IHN0cmluZykgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuXG5cbiAgdHJ5IHtcbiAgICBjb25zdCBwcm9ncmVzc0RhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFBST0dSRVNTX0tFWSkgfHwgXCJ7fVwiKVxuICAgIHByb2dyZXNzRGF0YVtjb250ZW50SWQgKyAoZXBpc29kZUlkID8gYF8ke2VwaXNvZGVJZH1gIDogXCJcIildID0geyBjdXJyZW50VGltZSwgZHVyYXRpb24gfVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFBST0dSRVNTX0tFWSwgSlNPTi5zdHJpbmdpZnkocHJvZ3Jlc3NEYXRhKSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHNhdmUgY29udGVudCBwcm9ncmVzczpcIiwgZXJyb3IpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldENvbnRlbnRDdXJyZW50VGltZSA9IChjb250ZW50SWQ6IHN0cmluZywgZXBpc29kZUlkPzogc3RyaW5nKTogbnVtYmVyIHwgbnVsbCA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gbnVsbFxuXG4gIHRyeSB7XG4gICAgY29uc3QgcHJvZ3Jlc3NEYXRhID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShQUk9HUkVTU19LRVkpIHx8IFwie31cIilcbiAgICBjb25zdCBwcm9ncmVzcyA9IHByb2dyZXNzRGF0YVtjb250ZW50SWQgKyAoZXBpc29kZUlkID8gYF8ke2VwaXNvZGVJZH1gIDogXCJcIildXG4gICAgcmV0dXJuIHByb2dyZXNzID8gcHJvZ3Jlc3MuY3VycmVudFRpbWUgOiBudWxsXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBnZXQgY29udGVudCBwcm9ncmVzczpcIiwgZXJyb3IpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG4vLyBUZXN0IENvbm5lY3Rpb25cbmV4cG9ydCBjb25zdCB0ZXN0Q29ubmVjdGlvbiA9IGFzeW5jICgpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBBdHRlbXB0IHRvIGZldGNoIHNlcmllcyAoYSBiYXNpYyBBUEkgY2FsbClcbiAgICBhd2FpdCBnZXRBbGxTZXJpZXMoKVxuICAgIHJldHVybiB0cnVlXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkNvbm5lY3Rpb24gdGVzdCBmYWlsZWQ6XCIsIGVycm9yKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8vIEVycm9yIE1lc3NhZ2UgSGVscGVyXG5leHBvcnQgY29uc3QgZ2V0RXJyb3JNZXNzYWdlID0gKGVycm9yOiBhbnkpOiBzdHJpbmcgPT4ge1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBBdXRoZW50aWNhdGlvbkVycm9yKSB7XG4gICAgcmV0dXJuIFwiRmFsaGEgbmEgYXV0ZW50aWNhw6fDo28uIFZlcmlmaXF1ZSBzdWFzIGNyZWRlbmNpYWlzLlwiXG4gIH0gZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBOb3RGb3VuZEVycm9yKSB7XG4gICAgcmV0dXJuIFwiUmVjdXJzbyBuw6NvIGVuY29udHJhZG8uXCJcbiAgfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIEFwaUVycm9yKSB7XG4gICAgcmV0dXJuIGBFcnJvIG5hIEFQSTogJHtlcnJvci5tZXNzYWdlfWBcbiAgfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIE5ldHdvcmtFcnJvcikge1xuICAgIHJldHVybiBcIkVycm8gZGUgcmVkZS4gVmVyaWZpcXVlIHN1YSBjb25leMOjbyBjb20gYSBpbnRlcm5ldC5cIlxuICB9IGVsc2UgaWYgKGVycm9yIGluc3RhbmNlb2YgVHlwZUVycm9yICYmIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJGYWlsZWQgdG8gZmV0Y2hcIikpIHtcbiAgICByZXR1cm4gXCJFcnJvIGFvIGNvbmVjdGFyIGFvIHNlcnZpZG9yLiBWZXJpZmlxdWUgYSBVUkwgZSBzdWEgY29uZXjDo28uXCJcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJPY29ycmV1IHVtIGVycm8gaW5lc3BlcmFkby5cIlxuICB9XG59XG4iXSwibmFtZXMiOlsiQXV0aGVudGljYXRpb25FcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwibmFtZSIsIk5vdEZvdW5kRXJyb3IiLCJBcGlFcnJvciIsInN0YXR1c0NvZGUiLCJOZXR3b3JrRXJyb3IiLCJnZXRDcmVkZW50aWFscyIsInN0b3JlZENvbmZpZyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJjcmVkZW50aWFscyIsIkpTT04iLCJwYXJzZSIsImZvcmNlSHR0cHMiLCJhcGlVcmwiLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0c1dpdGgiLCJyZXBsYWNlIiwiZXJyb3IiLCJjb25zb2xlIiwiYXBpUmVxdWVzdCIsImVuZHBvaW50IiwicGFyYW1zIiwicmV0cmllcyIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1cmwiLCJVUkwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInByb3RvY29sIiwid2FybiIsInF1ZXJ5UGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiYWN0aW9uIiwiZnVsbFVybCIsInRvU3RyaW5nIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsIm1vZGUiLCJoZWFkZXJzIiwicmVmZXJyZXJQb2xpY3kiLCJvayIsInN0YXR1cyIsInByb2Nlc3MiLCJlbnYiLCJVU0VfUFJPWFkiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImpzb24iLCJUeXBlRXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJpbmNsdWRlcyIsImxvZyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImdldFN0cmVhbVVybCIsInN0cmVhbUlkIiwic3RyZWFtVHlwZSIsImVwaXNvZGVJZCIsImJhc2VVcmwiLCJBUElfRU5EUE9JTlRTIiwiR0VUX0FMTF9TRVJJRVMiLCJHRVRfQUxMX01PVklFUyIsIkdFVF9BTExfTElWRV9TVFJFQU1TIiwiR0VUX1NFUklFU19JTkZPIiwiR0VUX01PVklFX0lORk8iLCJTRUFSQ0giLCJnZXRBbGxTZXJpZXMiLCJPYmplY3QiLCJlbnRyaWVzIiwic2VyaWVzIiwibWFwIiwiaWQiLCJnZXRBbGxNb3ZpZXMiLCJ2b2QiLCJtb3ZpZSIsImdldEFsbExpdmVTdHJlYW1zIiwibGl2ZSIsImNoYW5uZWwiLCJnZXRTZXJpZXNJbmZvIiwic2VyaWVzSWQiLCJzZXJpZXNfaWQiLCJnZXRNb3ZpZUluZm8iLCJ2b2RJZCIsInZvZF9pZCIsInNlYXJjaENvbnRlbnQiLCJxdWVyeSIsInNlcmllc1Jlc3VsdHMiLCJtYXBTZXJpZXNUb0NvbnRlbnQiLCJtb3ZpZVJlc3VsdHMiLCJtYXBNb3ZpZVRvQ29udGVudCIsImNoYW5uZWxSZXN1bHRzIiwibWFwQ2hhbm5lbFRvQ29udGVudCIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJwbG90IiwidGh1bWJuYWlsIiwiY292ZXIiLCJ0eXBlIiwiZ2VucmUiLCJ5ZWFyIiwiZHVyYXRpb24iLCJzdHJlYW1faWNvbiIsIm1hcFNlcmllc0RldGFpbHNUb0NvbnRlbnQiLCJzZXJpZXNEZXRhaWxzIiwiaW5mbyIsImVwaXNvZGVzIiwiZXBpc29kZSIsIlBST0dSRVNTX0tFWSIsInNhdmVDb250ZW50UHJvZ3Jlc3MiLCJjb250ZW50SWQiLCJjdXJyZW50VGltZSIsInByb2dyZXNzRGF0YSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJnZXRDb250ZW50Q3VycmVudFRpbWUiLCJwcm9ncmVzcyIsInRlc3RDb25uZWN0aW9uIiwiZ2V0RXJyb3JNZXNzYWdlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api-service.ts\n"));

/***/ })

});